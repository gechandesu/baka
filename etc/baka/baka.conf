# * baka 0.2.0
# This is baka.conf example. See baka(1) for more info.

# Path to lookup Entries.
entries = /etc/baka/entries

# Log file. Default: /var/log/baka
log = /var/log/baka

# Log format.
#
# Log format actually is `date` format string. See date(1) or
# 'date --help' for info.
#
# Special syntax (palceholdes):
#   {log}   will be replaced with actual log string.
#
# Result for this example:
#   [21 Jul 2021 22:53:56 +0300] Backup [Started]
log_format = [%d %b %Y %T %z] {log}

# Filename format.
#
# Special syntax (placeholders):
#   {name}      replaces with file, directory or database name.
#   {prefix}    replaces with prefix specified in Entry file
#               or by autoprefix (based on Entry file name).
#
# Examples:
#   myprefix_myfiles_20210722-2110.tar.gz
#   myprefix_mydb_20210722-2110.sql.gz
filename_format = {prefix}{name}_%Y%m%d-%H%M

# Automatic prefix for backups.
#
# Prefix is based on Entry file name.
# You can override autoprefix into Entry variable 'prefix'.
autoprefix = true

# Allow Bash command executing.
#
# Default: false
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @@ IT IS POTTENTIALLY DANGEROUS!              @@
# @@ DO NOT USE UNTRUSTED COMMANDS IN ENTRY!    @@
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
allow_commands = false

# Local storage.
#
# This global 'local' value can be overrided in Entry file.
# Backups will be saved into 'local' directory.
#local = /backups

# Create directory per date.
#
# For example: backup 2022-01-01 will be saved in path
# /backups/example.com/2022-01-01/example.com_mybackup_20220101-0000.sql.gz
# instead of /backups/example.com/example.com_mybackup_20220101-0000.sql.gz
#
# `dir_per_date` value is interpretated as path. Use '/' to create nested
# hierarсрy. '%Y/%m/%d' will expand to:
# /backups/example.com/2022/01/01/example.com_mybackup_20220101-0000.sql.gz
dir_per_date = %Y-%m-%d

# Remote storage.
#
# Uses URI format: [scheme]://[user[:password]]@[host[:port]][/path]
#
# Schemas can be:
#   none        no remote storage.
#   rsync       copy files to remote storage via rsync over SSH.
#   s3          copy files to Amazon S3 or S3 compatible storage via s3cmd.
remote = none

# Local backups live time (in days).
#
# Used by 'baka remove' command. Files older than 'livetime' days will be
# removed.
livetime = 30
